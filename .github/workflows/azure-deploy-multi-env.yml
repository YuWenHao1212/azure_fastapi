name: Deploy to Azure Functions (Multi-Environment)

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio ruff

    - name: Run code quality checks
      run: |
        ruff check src/ tests/ --exclude=legacy,archive

    - name: Run unit tests
      env:
        LLM2_ENDPOINT: https://test-endpoint.com
        LLM2_API_KEY: test-key
        OPENAI_API_KEY: test-key
        OPENAI_API_BASE: https://test-endpoint.com
        OPENAI_API_VERSION: 2023-05-15
        OPENAI_DEPLOYMENT_NAME: test-deployment
        EMBEDDING_ENDPOINT: https://test-endpoint.com
        EMBEDDING_API_KEY: test-key
        JWT_SECRET_KEY: test-secret-key
        JWT_ALGORITHM: HS256
        JWT_EXPIRE_MINUTES: 30
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://airesumeadvisor-fastapi-staging.azurewebsites.net
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Zip artifact for deployment
      run: |
        zip -r deploy.zip . \
          -x "*.git*" \
          -x "venv/*" \
          -x ".venv/*" \
          -x "__pycache__/*" \
          -x "tests/*" \
          -x ".pytest_cache/*" \
          -x "*.md" \
          -x ".github/*" \
          -x "local.settings.json" \
          -x ".env" \
          -x ".serena/*" \
          -x ".claude/*" \
          -x "*.code-workspace" \
          -x "temp/*" \
          -x "docs/*" \
          -x "legacy/*" \
          -x "archive/*"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Staging Function App
      run: |
        az functionapp deployment source config-zip \
          --resource-group airesumeadvisorfastapi \
          --name airesumeadvisor-fastapi-staging \
          --src deploy.zip

    - name: Check deployment health
      run: |
        sleep 30
        echo "üîç Checking staging deployment health..."
        
        ROOT_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://airesumeadvisor-fastapi-staging.azurewebsites.net/")
        echo "Root endpoint returned: $ROOT_CHECK"
        
        if [ -n "${{ secrets.STAGING_FUNCTION_KEY }}" ]; then
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://airesumeadvisor-fastapi-staging.azurewebsites.net/api/v1/health?code=${{ secrets.STAGING_FUNCTION_KEY }}")
          echo "Health endpoint returned: $HEALTH_CHECK"
          
          if [ $HEALTH_CHECK -eq 200 ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ö†Ô∏è  Staging health check returned $HEALTH_CHECK"
          fi
        fi

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://airesumeadvisor-fastapi.azurewebsites.net
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Zip artifact for deployment
      run: |
        zip -r deploy.zip . \
          -x "*.git*" \
          -x "venv/*" \
          -x ".venv/*" \
          -x "__pycache__/*" \
          -x "tests/*" \
          -x ".pytest_cache/*" \
          -x "*.md" \
          -x ".github/*" \
          -x "local.settings.json" \
          -x ".env" \
          -x ".serena/*" \
          -x ".claude/*" \
          -x "*.code-workspace" \
          -x "temp/*" \
          -x "docs/*" \
          -x "legacy/*" \
          -x "archive/*"

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Production Function App
      run: |
        az functionapp deployment source config-zip \
          --resource-group airesumeadvisorfastapi \
          --name airesumeadvisor-fastapi \
          --src deploy.zip

    - name: Check deployment health
      run: |
        sleep 30
        echo "üîç Checking production deployment health..."
        
        ROOT_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://airesumeadvisor-fastapi.azurewebsites.net/")
        echo "Root endpoint returned: $ROOT_CHECK"
        
        if [ -n "${{ secrets.FUNCTION_KEY }}" ]; then
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "https://airesumeadvisor-fastapi.azurewebsites.net/api/v1/health?code=${{ secrets.FUNCTION_KEY }}")
          echo "Health endpoint returned: $HEALTH_CHECK"
          
          if [ $HEALTH_CHECK -eq 200 ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ö†Ô∏è  Production health check returned $HEALTH_CHECK"
          fi
        fi

  notify:
    runs-on: ubuntu-latest
    name: Notify deployment status
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "üéâ Deployment to Staging successful!"
        elif [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "üéâ Deployment to Production successful!"
        else
          echo "‚ùå Deployment failed!"
        fi