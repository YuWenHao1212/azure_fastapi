name: Deploy to Japan East Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'airesumeadvisor-fastapi-japaneast'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.11'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Create and activate virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: üìö Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Run Pre-deployment Tests (Level 3)
      env:
        # ‰∏ªË¶Å LLM ÊúçÂãô
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        # GPT-4.1 mini (ÂøÖÈ†à - ‰ΩøÁî®‰∏çÂêåÁöÑÁ´ØÈªû)
        GPT41_MINI_JAPANEAST_API_KEY: ${{ secrets.GPT41_MINI_JAPANEAST_API_KEY }}
        GPT41_MINI_JAPANEAST_ENDPOINT: ${{ secrets.GPT41_MINI_JAPANEAST_ENDPOINT }}
        GPT41_MINI_JAPANEAST_DEPLOYMENT: "gpt-4-1-mini-japaneast"
        GPT41_MINI_JAPANEAST_API_VERSION: "2025-01-01-preview"
        # ÂµåÂÖ•ÊúçÂãô
        AZURE_OPENAI_EMBEDDING_API_KEY: ${{ secrets.AZURE_OPENAI_EMBEDDING_API_KEY || secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_EMBEDDING_ENDPOINT: ${{ secrets.AZURE_OPENAI_EMBEDDING_ENDPOINT }}
        EMBEDDING_API_KEY: ${{ secrets.AZURE_OPENAI_EMBEDDING_API_KEY || secrets.AZURE_OPENAI_API_KEY }}
        EMBEDDING_ENDPOINT: ${{ secrets.AZURE_OPENAI_EMBEDDING_ENDPOINT }}
        # LLM Ê®°ÂûãÈÖçÁΩÆ
        LLM_MODEL_KEYWORDS: "gpt41-mini"
        LLM_MODEL_DEFAULT: "gpt4o-2"
        # ÂäüËÉΩÊóóÊ®ô
        ENABLE_LLM_MODEL_OVERRIDE: "true"
        ENABLE_LLM_MODEL_HEADER: "true"
      run: |
        echo "Running Level 3 integration tests for staging deployment..."
        echo "Ê≥®ÊÑè: Ê†πÊìö CLAUDE.mdÔºåClaude Code Â∑≤Âü∑Ë°åÈÅ©Áï∂Â±§Á¥öÊ∏¨Ë©¶ (Level 0-3)"
        echo "ÁèæÂú®Âü∑Ë°å Level 3 Êï¥ÂêàÊ∏¨Ë©¶‰ª•È©óË≠â API ÂäüËÉΩ..."
        
        # Make precommit.sh executable
        chmod +x ./precommit.sh
        
        # Continue with precommit tests
        ./precommit.sh --level-3 --parallel --no-coverage

    - name: üèóÔ∏è Build deployment package
      run: |
        # Create deployment package
        python -m pip install --target=".python_packages/lib/site-packages" -r requirements.txt
        
        # Clean up unnecessary files
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete 2>/dev/null || true

    - name: üöÄ Deploy to Japan East Staging Slot
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        slot-name: 'staging'
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_JAPANEAST_STAGING_PUBLISH_PROFILE }}
        respect-funcignore: true

    - name: üè• Health Check - Staging Slot
      env:
        STAGING_URL: "https://airesumeadvisor-fastapi-japaneast-staging.azurewebsites.net"
        STAGING_HOST_KEY: ${{ secrets.JAPANEAST_STAGING_HOST_KEY }}
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Test staging health endpoint
        echo "Testing staging health endpoint..."
        
        # First check if host key is available
        if [ -z "$STAGING_HOST_KEY" ]; then
          echo "‚ö†Ô∏è  Warning: STAGING_HOST_KEY not set, trying without authentication..."
          HEALTH_URL="${STAGING_URL}/health"
        else
          echo "‚úÖ Using host key for authentication"
          HEALTH_URL="${STAGING_URL}/health?code=${STAGING_HOST_KEY}"
        fi
        
        for i in {1..5}; do
          response=$(curl -s -w "\n%{http_code}" "$HEALTH_URL" | tail -1)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Staging health check passed"
            break
          elif [ "$response" = "401" ]; then
            echo "‚ùå Health check failed with 401 Unauthorized"
            echo "Please ensure JAPANEAST_STAGING_HOST_KEY is set in GitHub Secrets"
            exit 1
          else
            echo "‚è≥ Attempt $i failed with status $response, retrying..."
            sleep 10
          fi
        done

    - name: üß™ Run Smoke Tests on Staging
      env:
        STAGING_URL: "https://airesumeadvisor-fastapi-japaneast-staging.azurewebsites.net"
        STAGING_HOST_KEY: ${{ secrets.JAPANEAST_STAGING_HOST_KEY }}
      run: |
        echo "Running smoke tests on staging..."
        
        # Test keyword extraction endpoint
        response=$(curl -s -w "\n%{http_code}" -X POST \
          "${STAGING_URL}/api/v1/extract-jd-keywords?code=${STAGING_HOST_KEY}" \
          -H "Content-Type: application/json" \
          -d '{
            "job_description": "We are looking for a Python Developer with Azure experience.",
            "language": "en"
          }')
        
        status_code=$(echo "$response" | tail -n 1)
        if [ "$status_code" = "200" ]; then
          echo "‚úÖ Keyword extraction test passed"
        else
          echo "‚ùå Keyword extraction test failed with status: $status_code"
          echo "$response"
          exit 1
        fi

    - name: üìä Report Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Staging deployment to Japan East completed successfully!"
          echo "üîó Staging URL: https://${AZURE_FUNCTIONAPP_NAME}-staging.azurewebsites.net"
        else
          echo "‚ùå Staging deployment failed. Check the logs above."
        fi