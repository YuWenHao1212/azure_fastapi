name: Hourly Health Check

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  FUNCTION_APP_URL: https://airesumeadvisor-fastapi.azurewebsites.net

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check API Health
      id: health_check
      run: |
        # Perform health check with function key
        FUNCTION_KEY="${{ secrets.AZURE_FUNCTION_KEY }}"
        
        # Debug: Check if key is available
        if [ -z "${FUNCTION_KEY}" ]; then
          echo "❌ ERROR: AZURE_FUNCTION_KEY secret is not available"
          echo "Please ensure the secret is configured in: Settings → Secrets and variables → Actions"
          exit 1
        else
          echo "✅ Function key is available (length: ${#FUNCTION_KEY})"
        fi
        
        # Test with key
        echo "Testing health endpoint with function key..."
        HEALTH_URL="${{ env.FUNCTION_APP_URL }}/api/v1/health?code=${FUNCTION_KEY}"
        echo "URL: ${{ env.FUNCTION_APP_URL }}/api/v1/health?code=[REDACTED]"
        
        response=$(curl -s -o /dev/null -w "%{http_code}" "${HEALTH_URL}")
        
        echo "HTTP Status Code: $response"
        echo "status_code=$response" >> $GITHUB_OUTPUT
        
        # Also capture the response body for debugging
        if [ "$response" != "200" ]; then
          echo "Response body:"
          curl -s "${HEALTH_URL}" | jq . || curl -s "${HEALTH_URL}"
        fi
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed"
          exit 0
        else
          echo "❌ Health check failed with status code: $response"
          echo ""
          echo "Troubleshooting steps:"
          echo "1. Verify AZURE_FUNCTION_KEY secret is set in GitHub repository settings"
          echo "2. Ensure the key matches the one in Azure Portal"
          echo "3. Check if the Function App is running in Azure Portal"
          exit 1
        fi
    
    - name: Check Keyword Extraction Endpoint
      id: keyword_check
      if: success()
      env:
        AZURE_FUNCTION_KEY: ${{ secrets.AZURE_FUNCTION_KEY }}
      run: |
        # Test keyword extraction with minimal request
        response=$(curl -s -X POST "${{ env.FUNCTION_APP_URL }}/api/v1/extract-jd-keywords?code=${{ env.AZURE_FUNCTION_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "job_description": "We are looking for a Python developer with FastAPI experience",
            "language": "en",
            "max_keywords": 5
          }')
        
        # Check if response contains success field
        if echo "$response" | grep -q '"success":true'; then
          echo "✅ Keyword extraction endpoint is working"
          exit 0
        else
          echo "❌ Keyword extraction endpoint failed"
          echo "Response: $response"
          exit 1
        fi
    
    - name: Report failure in workflow summary
      if: failure()
      run: |
        echo "## ❌ Health Check Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status Code**: ${{ steps.health_check.outputs.status_code || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Action Required:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check if AZURE_FUNCTION_KEY secret is configured correctly" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify Function App is running in Azure Portal" >> $GITHUB_STEP_SUMMARY
        echo "3. Check Application Insights for detailed errors" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Debugging Commands:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo '# Test locally with your function key:' >> $GITHUB_STEP_SUMMARY
        echo 'curl "https://airesumeadvisor-fastapi.azurewebsites.net/api/v1/health?code=YOUR_FUNCTION_KEY"' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    # Removed automatic issue management due to permissions
    # Issues can be manually created if needed
    
    - name: Summary
      if: always()
      run: |
        echo "## Health Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Endpoint**: ${{ steps.health_check.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Keyword Extraction**: ${{ steps.keyword_check.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.health_check.outcome }}" = "success" ] && [ "${{ steps.keyword_check.outcome }}" = "success" ]; then
          echo "✅ **All checks passed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed**" >> $GITHUB_STEP_SUMMARY
        fi