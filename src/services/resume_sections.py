"""
Section processor for handling different resume sections.
"""

import logging

from ..core.html_processor import HTMLProcessor
from ..core.language_handler import LanguageHandler
from ..models.domain.tailoring import (
    ResumeSection,
    SectionOptimization,
    TailoringContext,
)

logger = logging.getLogger(__name__)


class SectionProcessor:
    """Process individual resume sections for optimization"""
    
    def __init__(self):
        self.html_processor = HTMLProcessor()
        self.language_handler = LanguageHandler()
    
    def identify_sections(self, html: str, language: str = "en") -> dict[str, ResumeSection]:
        """Identify and extract sections from resume HTML"""
        structure = self.html_processor.parse_resume(html)
        
        # Normalize section names based on language
        normalized_sections = {}
        for section_name, section in structure.sections.items():
            if section_name == "_header":
                # Keep header as is
                normalized_sections["_header"] = section
            else:
                normalized_name = self.language_handler.normalize_section_name(
                    section_name, 
                    language
                )
                normalized_sections[normalized_name] = section
        
        return normalized_sections
    
    def process_available_sections(
        self, 
        sections: dict[str, ResumeSection], 
        context: TailoringContext
    ) -> list[SectionOptimization]:
        """Process all available sections and ensure Summary exists"""
        optimizations = []
        
        # Always check/create Summary first
        summary_optimization = self._ensure_summary_section(sections, context)
        if summary_optimization:
            optimizations.append(summary_optimization)
        
        # Process other sections
        section_processors = {
            "skills": self._process_skills_section,
            "experience": self._process_experience_section,
            "projects": self._process_projects_section,
            "education": self._process_education_section,
            "certifications": self._process_certifications_section
        }
        
        for section_type, processor in section_processors.items():
            if section_type in sections:
                optimization = processor(sections[section_type], context)
                if optimization:
                    optimizations.append(optimization)
        
        return optimizations
    
    def _ensure_summary_section(
        self, 
        sections: dict[str, ResumeSection], 
        context: TailoringContext
    ) -> SectionOptimization | None:
        """Ensure Summary section exists, create if missing"""
        summary_section = sections.get("summary")
        
        if not summary_section:
            # Create new summary
            logger.info("Creating new Summary section")
            
            # Mark as new section
            new_summary_content = self._create_summary_content(context)
            
            return SectionOptimization(
                section_name="Summary",
                original_content="",
                optimized_content=new_summary_content,
                markers=[],
                improvements=["Created new professional summary section"],
                keywords_added=[],
                strengths_highlighted=[]
            )
        else:
            # Optimize existing summary
            return self._process_summary_section(summary_section, context)
    
    def _create_summary_content(self, context: TailoringContext) -> str:
        """Create summary content based on context"""
        # This is a placeholder - actual content will be generated by LLM
        # Here we just prepare the structure
        return '<p class="opt-new">[Summary content to be generated by LLM]</p>'
    
    def _process_summary_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process existing summary section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Summary",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )
    
    def _process_skills_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process skills section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Skills",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )
    
    def _process_experience_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process work experience section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Work Experience",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )
    
    def _process_projects_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process projects section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Projects",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )
    
    def _process_education_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process education section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Education",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )
    
    def _process_certifications_section(
        self, 
        section: ResumeSection, 
        context: TailoringContext
    ) -> SectionOptimization:
        """Process certifications section"""
        # Placeholder for LLM processing
        return SectionOptimization(
            section_name="Certifications",
            original_content=section.content,
            optimized_content=section.content,  # Will be replaced by LLM
            markers=[],
            improvements=[],
            keywords_added=[],
            strengths_highlighted=[]
        )